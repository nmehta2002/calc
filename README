===============================================================================
About the project
===============================================================================
The calc project provides a frame-work to execute operations on a stream of 
integers. Each engine executes an operation on a stream of integers.  The 
framework provides an API to add new engines or operations. 

===============================================================================
How to build
===============================================================================
Run:
./build_and_run_tsts

===============================================================================
How to run
===============================================================================
Run "./calc help" to get all the usage options.

Some examples below:
./calc divider 4 2

./calc divider <file1> <file2>

===============================================================================
How to add new engines
===============================================================================
Adding new engines should be straight forward.
- Subclass Engine and provide the implementation of the following:

  - Constructor

  - run method
    e.g.
    virtual int64_t run() final;

  - static factory method
    e.g.
    static std::unique_ptr<Engine> make(
      std::unique_ptr<OperandStream> aPOperandStream);

  - In the .cc file for the engine register the engine with the factory and 
    specify the input options supported by the engine.
    e.g.
    static EngineRegistrationHelper<EngineDivide> engineRegistration(
      "divider",
      { EngineFactory::ENGINE_IN_OPT_NUMBER_LIST,
        EngineFactory::ENGINE_IN_OPT_FILE_LIST});

  - Add the new engine modules to subdir.mk, list the engine in ENGINES list.

  - Compile and build.
    ./build_and_run_tsts

Thats it, once you do the above, the engine should now be callable from the 
calc command.  The engine will also be listed in output of ./calc help
with the appropriate input options. It should also be easy to follow an 
already existing engine like EngineDivide. 

===============================================================================
More documentation
===============================================================================
The doc directoy has brief documentation around the other classes in the 
frame-work.



